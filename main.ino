/* Main.ino file generated by New Project wizard
 *
 * Created:   Sun May 10 2020
 * Processor: ATmega328P
 * Compiler:  Arduino AVR
 * Source Code: RGB Lighting Control
 */
#include <SoftwareSerial.h>
#include "TrafficLight.h"
#include "PID.h"

const int readSensorPin = 4;
int ifRead;
unsigned int carCount = 0;
unsigned long currentTime = 0;
unsigned long timeSinceArduinoTurnedOn = 0;
unsigned long detectedTime = 0;
unsigned long previousDetectedTime = 0;
unsigned long timeError = 0;
unsigned long timeDelay = 0;
unsigned long previousTime = 0;
unsigned long sensorTime = 0;
unsigned long timeSinceGreen = 0;
unsigned long timeSinceYellow = 0;
bool runOnce[5] = { true,true,true,true,true};
String msg = "";
bool targetDetected = false;
bool enterSystem = false;
bool flashingRed = false;
TrafficLight lightNorth;
TrafficLight lightSouth;
PID pidController;
char dataCarCount[32];
char str[] = "Car Count:";
char buffer[10];
void setup()
 { // put your setup code here, to run once:
  Serial.begin(9600,SERIAL_8N1);
  pinMode(readSensorPin,INPUT);
  lightNorth.setLightPinOut(OUTPUT, 14, 10);
  lightNorth.directionState = lightNorth.NORTH;
  lightNorth.lightState = lightNorth.FLASHINGRED;
  lightSouth.setLightPinOut(OUTPUT, 15, 6);
  lightSouth.directionState = lightSouth.SOUTH;
  lightSouth.lightState = lightSouth.FLASHINGRED;
  Serial.flush();
 }

void loop()
{ // put your main code here, to run repeatedly:
	msg = "";
	timeSinceArduinoTurnedOn = millis();
	// check for data byte on USB serial port
	if (Serial.available())
	{
		// get byte from USB serial port
		while (Serial.available() > 0)
		{
			msg = Serial.readString();// read the incoming data as string;
		}
		if (msg == "COM3")
		{
			//Send data to usb serial port
			Serial.println("\nWelcome to Street Smart Traffic Lighting System !");
			Serial.println("\nEntering System...");
			Serial.println("\nPlease Wait...");
		}
		if (msg == "2682209")
		{
			Serial.write("SUCCESS");
			enterSystem = true;
			previousTime = millis();
			sensorTime = millis();

		}
		if (msg == "QUIT")
		{
			Serial.write("QUIT");
			enterSystem = false;
		}
		if (msg == "RESET")
		{
			Serial.write("RESET");
			for (int i = 0; i < 5; i++)
			{
				runOnce[i] = true;
			}
			flashingRed = false;
			carCount = 0;
			previousTime = millis();
			sensorTime = millis();
		}
		if (msg == "FLASH")
		{
			Serial.write("FLASHINGRED");
			flashingRed = true;
		}
		
	}
	else { Serial.flush(); }
	


	if (enterSystem)
	{
		currentTime = millis();

		// Car Detection
		
			ifRead = digitalRead(readSensorPin);
			sensorTime = currentTime;
			if (ifRead == LOW)
			{
				targetDetected = true;
				detectedTime = millis();
			}
			else { targetDetected = false; }
			if (!targetDetected)
			{
				runOnce[5] = true;
			}
			if (targetDetected && lightNorth.lightState == lightNorth.GREEN && runOnce[5])
			{
				carCount += 1;
				strcpy(dataCarCount, str);
				strcat(dataCarCount, itoa(carCount,buffer,10));
				Serial.println(dataCarCount);
				runOnce[5] = false;
			}
		
		if (currentTime - previousTime > 2000 && runOnce[0])
		{
			Serial.write("NORTHGREEN");
			lightNorth.lightState = lightNorth.GREEN;
			lightSouth.lightState = lightSouth.GREEN;
			timeSinceGreen = currentTime;
			runOnce[0] = false;

		}
		
		if (currentTime - previousTime > 2000 && !flashingRed)
		{
			if (carCount >= pidController.getTargetCarCount() || (currentTime - timeSinceGreen >= pidController.getTargetTimeValue()))
			{
				if (currentTime - timeSinceGreen >= pidController.getTargetTimeValue() && runOnce[4])
				{
					Serial.print("\nTarget Time Reached:");
					Serial.print(pidController.getTargetTimeValue() / 1000, DEC);
					Serial.print(" Seconds");
					runOnce[4] = false;
				}
				if (runOnce[1] && (currentTime - timeSinceGreen) >= (pidController.getTargetTimeValue()+1000))
				{
					lightNorth.lightState = lightNorth.YELLOW;
					lightSouth.lightState = lightSouth.YELLOW;
					Serial.write("NORTHYELLOW");
					timeSinceYellow = currentTime;
					runOnce[1] = false;
				}
				if (!runOnce[1] && currentTime - timeSinceYellow > 2000)
				{
					lightNorth.lightState = lightNorth.RED;
					lightSouth.lightState = lightSouth.RED;
					if (runOnce[2])
					{
						Serial.write("NORTHRED");
						runOnce[2] = false;
					}
				}
			}
		}
		if (flashingRed)
		{
			lightNorth.lightState = lightNorth.FLASHINGRED;
			lightSouth.lightState = lightSouth.FLASHINGRED;
			lightNorth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
			lightSouth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
		}
		else {
			lightNorth.TrafficLightControl(currentTime, 1000);
			lightSouth.TrafficLightControl(currentTime, 1000);
		}
	}
	else
	{
		lightNorth.lightState = lightNorth.FLASHINGRED;
		lightSouth.lightState = lightSouth.FLASHINGRED;
		lightNorth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
		lightSouth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
	}
	
}
	
