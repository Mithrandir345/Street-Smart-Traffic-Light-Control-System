/* Main.ino file generated by New Project wizard
 *
 * Created:   Sun May 10 2020
 * By: Anthony Dillon, Dayanara Serges, Christopher Ali
 * Processor: ATmega328P
 * Compiler:  Arduino AVR
 * Source Code: Street Smart Traffic Light Control System
 */
#include <SoftwareSerial.h>
#include "TrafficLight.h"
#include "PID.h"

const int readNorthSensorPin = 8;
const int readSouthSensorPin = 13;
const int readEastSensorPin = 12;
const int readWestSensorPin = 2;

int ifNorthRead;
int ifSouthRead;
int ifEastRead;
int ifWestRead;

unsigned int northCarCount = 0;
unsigned int eastCarCount = 0;
unsigned int westCarCount = 0;
unsigned int southCarCount = 0;
unsigned long currentTime = 0;
unsigned long timeSinceArduinoTurnedOn = 0;
unsigned long detectedNorthTime = 0;
unsigned long detectedSouthTime = 0;
unsigned long detectedWestTime = 0;
unsigned long detectedEastTime = 0;
unsigned long countTime = 0;

// Default time to start cycle
unsigned long previousTime = 0;

unsigned long timeSinceNorthandSouthGreen = 0;
unsigned long timeSinceNorthandSouthYellow = 0;
unsigned long timeSinceNorthandSouthRed = 0;

unsigned long timeSinceEastandWestGreen = 0;
unsigned long timeSinceEastandWestYellow = 0;
unsigned long timeSinceEastandWestRed = 0;

bool runOnceNorthandSouth[5] = { true,true,true,true,true};
bool runOnceEastandWest[5] = { true,true,true,true,true };
String msg = "";

bool targetNorthDetected = false;
bool targetNorthPreviouslyDetected = false;
bool targetSouthDetected = false;
bool targetSouthPreviouslyDetected = false;
bool targetEastDetected = false;
bool targetEastPreviouslyDetected = false;
bool targetWestDetected = false;
bool targetWestPreviouslyDetected = false;

bool enterSystem = false;
bool flashingRed = false;

// Traffic Light Instantiated Objects
TrafficLight lightNorth;
TrafficLight lightSouth;
TrafficLight lightEast;
TrafficLight lightWest;
bool isNorthAndSouth = true; // Default State North and South are Active
bool isEastAndWest = false; // Default State East and West are not Active
bool isResetCycle = false; // State Cycle that controls the bool control variables

char dataNorthCarCount[14];
char dataSouthCarCount[14];
char dataEastCarCount[14];
char dataWestCarCount[14];
char strN[] = "Car Count ~North:";
char strE[] = "Car Count  ~East:";
char strW[] = "Car Count  ~West:";
char strS[] = "Car Count ~South:";
char bufferN[10];
char bufferE[10];
char bufferW[10];
char bufferS[10];
void setup()
 { 
  // Setup Serial Baud Rate 9600, 8 bit and 1 stop bit
  Serial.begin(9600,SERIAL_8N1);

  pinMode(readNorthSensorPin,INPUT);
  pinMode(readSouthSensorPin, INPUT);
  pinMode(readEastSensorPin, INPUT);
  pinMode(readWestSensorPin, INPUT);


  lightNorth.setLightPinOut(OUTPUT, 14, 10);
  lightNorth.directionState = lightNorth.NORTH;
  lightNorth.lightState = lightNorth.FLASHINGRED;

  lightSouth.setLightPinOut(OUTPUT, 15, 6);
  lightSouth.directionState = lightSouth.SOUTH;
  lightSouth.lightState = lightSouth.FLASHINGRED;

  lightEast.setLightPinOut(OUTPUT, 16, 9);
  lightEast.directionState = lightEast.EAST;
  lightEast.lightState = lightEast.FLASHINGRED;

  lightWest.setLightPinOut(OUTPUT, 17, 5);
  lightWest.directionState = lightWest.WEST;
  lightWest.lightState = lightWest.FLASHINGRED;

  Serial.flush();
 }

void loop()
{ // put your main code here, to run repeatedly:
	msg = "";
	timeSinceArduinoTurnedOn = millis();
	// check for data byte on USB serial port
	if (Serial.available())
	{
		// get byte from USB serial port
		while (Serial.available() > 0)
		{
			msg = Serial.readString();// read the incoming data as string;
		}
		if (msg == "COM3")
		{
			//Send data to usb serial port
			Serial.println("\nWelcome to Street Smart Traffic Lighting System !");
			Serial.println("\nEntering System...");
			Serial.println("\nPlease Wait...");
		}
		if (msg == "2682209")
		{
			Serial.write("#SUCCESS!");
			enterSystem = true;
			previousTime = millis();
		}
		if (msg == "#QUIT")
		{
			Serial.write("#QUIT!");
			enterSystem = false;
		}
		if (msg == "#RESET")
		{
			Serial.write("#RESET!");
			for (int i = 0; i < 5; i++)
			{
				runOnceNorthandSouth[i] = true;
				runOnceEastandWest[i] = true;
			}
			flashingRed = false;
			isNorthAndSouth = true;
			isEastAndWest = false;
			northCarCount = 0;
			southCarCount = 0;
			eastCarCount = 0;
			westCarCount = 0;

			previousTime = millis();
		}
		if (msg == "#FLASH")
		{
			Serial.write("#FLASHINGRED!");
			flashingRed = true;
		}
		
	}
	else { Serial.flush(); }
	


	if (enterSystem)
	{
		currentTime = millis();

		// Car Detection
		if (isNorthAndSouth)
		{
			// Requires transition from East and West Control or from other state control
			if (isResetCycle)
			{
				for (int i = 0; i < 5; i++)
				{
					runOnceNorthandSouth[i] = true;
					runOnceEastandWest[i] = true;
					northCarCount = 0;
					southCarCount = 0;
					eastCarCount = 0;
					westCarCount = 0;
					lightNorth.setTargetTimeValue(60000ul);
					lightEast.setTargetTimeValue(60000ul);
				}
				isResetCycle = false; // Completed Reset of control variables
			}
				if (currentTime > detectedNorthTime + 100)
				{
					detectedNorthTime = currentTime;
					ifNorthRead = digitalRead(readNorthSensorPin);
				}
				if (ifNorthRead == LOW && !targetNorthPreviouslyDetected)
				{
					targetNorthDetected = true;
				}
				if(ifNorthRead == HIGH)
				{
					targetNorthDetected = false;
					targetNorthPreviouslyDetected = false;
				}
			if (targetNorthDetected && !targetNorthPreviouslyDetected && lightNorth.lightState == lightNorth.GREEN)
			{
				northCarCount += 1;
				strcpy(dataNorthCarCount, strN);
				strcat(dataNorthCarCount, itoa(northCarCount, bufferN, 10));
				Serial.println(dataNorthCarCount);
				Serial.print("$");
				targetNorthPreviouslyDetected = true;
				lightNorth.setTargetTimeValue(lightNorth.getTargetTimeValue() + 5000ul);
				Serial.println(lightNorth.getTargetTimeValue());
			}
			else if (!targetNorthDetected && lightNorth.lightState == lightNorth.GREEN && currentTime > countTime + 2000)
			{
				countTime = currentTime;
				lightNorth.setTargetTimeValue(lightNorth.getTargetTimeValue() - 5000ul);
				Serial.println(lightNorth.getTargetTimeValue());
			}
			if (currentTime - previousTime > 2000 && runOnceNorthandSouth[0])
			{
				Serial.write("#NORTHGREEN!");
				Serial.write("#EASTRED!");
				lightNorth.lightState = lightNorth.GREEN;
				lightSouth.lightState = lightSouth.GREEN;
				lightEast.lightState = lightEast.RED;
				lightWest.lightState = lightWest.RED;
				timeSinceNorthandSouthGreen = currentTime;
				runOnceNorthandSouth[0] = false;

			}

			if (currentTime - previousTime > 2000 && !flashingRed)
			{
				if (northCarCount >= lightNorth.getTargetCarCount() || (currentTime - timeSinceNorthandSouthGreen >= lightNorth.getTargetTimeValue()))
				{
					if (currentTime - timeSinceNorthandSouthGreen >= lightNorth.getTargetTimeValue() && runOnceNorthandSouth[4] && runOnceNorthandSouth[1])
					{
						Serial.print("\nNorth Target Time Reached:");
						Serial.print(lightNorth.getTargetTimeValue() / 1000, DEC);
						Serial.print(" Sec");
						runOnceNorthandSouth[4] = false;
					}
					if (runOnceNorthandSouth[1])
					{
						if ((currentTime - timeSinceNorthandSouthGreen) >= (lightNorth.getTargetTimeValue() + 1000))
						{
							lightNorth.lightState = lightNorth.YELLOW;
							lightSouth.lightState = lightSouth.YELLOW;
							Serial.write("#NORTHYELLOW!");
							timeSinceNorthandSouthYellow = currentTime;
							runOnceNorthandSouth[1] = false;
						}
						else if (northCarCount >= lightNorth.getTargetCarCount())
						{
							Serial.print("\nNorth Target Car Count Reached");
							lightNorth.lightState = lightNorth.YELLOW;
							lightSouth.lightState = lightSouth.YELLOW;
							Serial.write("#NORTHYELLOW!");
							timeSinceNorthandSouthYellow = currentTime;
							runOnceNorthandSouth[1] = false;
						}

					}
					if (!runOnceNorthandSouth[1] && currentTime - timeSinceNorthandSouthYellow > 2000)
					{
						if (runOnceNorthandSouth[2])
						{
							lightNorth.lightState = lightNorth.RED;
							lightSouth.lightState = lightSouth.RED;
							Serial.write("#NORTHRED!");
							isNorthAndSouth = false;
							isEastAndWest = true;
							runOnceNorthandSouth[2] = false;
						}
					}
				}
			}
				lightNorth.TrafficLightControl(currentTime, 1000);
				lightSouth.TrafficLightControl(currentTime, 1000);
				lightEast.TrafficLightControl(currentTime, 1000);
				lightWest.TrafficLightControl(currentTime, 1000);
		}

		// If East and West State Active
		if (isEastAndWest)
		{
			// implement control structure for East and West

			// Calculate time since North and South were Red
			timeSinceNorthandSouthRed = currentTime - (timeSinceNorthandSouthYellow + 2000);

			if (currentTime > detectedEastTime + 100)
			{
				detectedEastTime = currentTime;
				ifEastRead = digitalRead(readEastSensorPin);
			}
			if (ifEastRead == LOW && !targetEastPreviouslyDetected)
			{
				targetEastDetected = true;
			}
			if (ifEastRead == HIGH)
			{
				targetEastDetected = false;
				targetEastPreviouslyDetected = false;
			}

			if (targetEastDetected && !targetEastPreviouslyDetected && lightEast.lightState == lightEast.GREEN)
			{
				eastCarCount += 1;
				strcpy(dataEastCarCount, strE);
				strcat(dataEastCarCount, itoa(eastCarCount, bufferE, 10));
				Serial.println(dataEastCarCount);
				Serial.print("$");
				targetEastPreviouslyDetected = true;
				lightEast.setTargetTimeValue(lightEast.getTargetTimeValue() + 5000ul);
				Serial.println(lightEast.getTargetTimeValue());
			}
			else if (!targetEastDetected && lightEast.lightState == lightEast.GREEN && currentTime > countTime + 2000)
			{
				countTime = currentTime;
				lightEast.setTargetTimeValue(lightEast.getTargetTimeValue() - 5000ul);
				Serial.println(lightEast.getTargetTimeValue());
			}

			if (currentTime - previousTime > 2000 && runOnceEastandWest[0])
			{
				Serial.write("#EASTGREEN!");
				Serial.write("#NORTHRED!");
				lightEast.lightState = lightEast.GREEN;
				lightWest.lightState = lightWest.GREEN;
				lightNorth.lightState = lightNorth.RED;
				lightSouth.lightState = lightSouth.RED;
				timeSinceEastandWestGreen = currentTime;
				runOnceEastandWest[0] = false;

			}

			if (currentTime - previousTime > 2000 && !flashingRed)
			{
				if (eastCarCount >= lightEast.getTargetCarCount() || (currentTime - timeSinceEastandWestGreen >= lightEast.getTargetTimeValue()))
				{
					if (currentTime - timeSinceEastandWestGreen >= lightEast.getTargetTimeValue() && runOnceEastandWest[4] && runOnceEastandWest[1])
					{
						Serial.print("\nEast Target Time Reached:");
						Serial.print(lightEast.getTargetTimeValue() / 1000, DEC);
						Serial.print(" Sec");
						runOnceEastandWest[4] = false;
					}
					if (runOnceEastandWest[1])
					{
						if ((currentTime - timeSinceEastandWestGreen) >= (lightEast.getTargetTimeValue() + 1000))
						{
							lightEast.lightState = lightEast.YELLOW;
							lightWest.lightState = lightWest.YELLOW;
							Serial.write("#EASTYELLOW!");
							timeSinceEastandWestYellow = currentTime;
							runOnceEastandWest[1] = false;
						}
						else if (eastCarCount >= lightEast.getTargetCarCount())
						{
							Serial.print("\nEast Target Car Count Reached");
							lightEast.lightState = lightEast.YELLOW;
							lightWest.lightState = lightWest.YELLOW;
							Serial.write("#EASTYELLOW!");
							timeSinceEastandWestYellow = currentTime;
							runOnceEastandWest[1] = false;
						}

					}
					if (!runOnceEastandWest[1] && currentTime - timeSinceEastandWestYellow > 2000)
					{
						if (runOnceEastandWest[2])
						{
							lightEast.lightState = lightEast.RED;
							lightWest.lightState = lightWest.RED;
							Serial.write("#EASTRED!");
							isNorthAndSouth = true;
							isEastAndWest = false;
							isResetCycle = true;
							runOnceEastandWest[2] = false;
						}
					}
				}
			}
			lightNorth.lightState = lightNorth.RED;
			lightSouth.lightState = lightSouth.RED;
			lightNorth.TrafficLightControl(currentTime, 1000);
			lightSouth.TrafficLightControl(currentTime, 1000);
			lightEast.TrafficLightControl(currentTime, 1000);
			lightWest.TrafficLightControl(currentTime, 1000);
		}
		if (flashingRed)
		{
			// GUI loses communication but system is still active or a fault has been detected, Flashing Red State is the safety feature
			isNorthAndSouth = false;
			isEastAndWest = false;
			lightNorth.lightState = lightNorth.FLASHINGRED;
			lightSouth.lightState = lightSouth.FLASHINGRED;
			lightEast.lightState = lightEast.FLASHINGRED;
			lightWest.lightState = lightWest.FLASHINGRED;
			lightNorth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
			lightSouth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
			lightEast.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
			lightWest.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
		}
		}
	else
	{
		// When The GUI Application Closes or Upon Initial Startup Light Control is Flashing Red until Main Program is Initiated
		lightNorth.lightState = lightNorth.FLASHINGRED;
		lightSouth.lightState = lightSouth.FLASHINGRED;
		lightEast.lightState = lightEast.FLASHINGRED;
		lightWest.lightState = lightWest.FLASHINGRED;
		lightNorth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
		lightSouth.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
		lightEast.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
		lightWest.TrafficLightControl(timeSinceArduinoTurnedOn, 1000);
	}
			
	
}
	
